[yvonne@centos8 afaryy]$ terraform init

Initializing the backend...

Successfully configured the backend "s3"! Terraform will automatically
use this backend unless the backend configuration changes.

Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v3.6.0...
- Installed hashicorp/aws v3.6.0 (signed by HashiCorp)

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, we recommend adding version constraints in a required_providers block
in your configuration, with the constraint strings suggested below.

* hashicorp/aws: version = "~> 3.6.0"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.


[yvonne@centos8 afaryy]$ terraform plan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_iam_instance_profile.s3-role-instanceprofile will be created
  + resource "aws_iam_instance_profile" "s3-role-instanceprofile" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "tdl4-s3-role-instanceprofile"
      + path        = "/"
      + role        = "tdl4-ec2-s3-role"
      + unique_id   = (known after apply)
    }

  # aws_iam_role.ec2-s3-role will be created
  + resource "aws_iam_role" "ec2-s3-role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = "InstanceS3Role"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "tdl4-ec2-s3-role"
      + path                  = "/"
      + tags                  = {
          + "Name" = "tdl4-ec2-s3-role"
        }
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy.s3-role-policy will be created
  + resource "aws_iam_role_policy" "s3-role-policy" {
      + id     = (known after apply)
      + name   = "tdl4-s3-role-policy"
      + policy = (known after apply)
      + role   = (known after apply)
    }

  # aws_instance.instance will be created
  + resource "aws_instance" "instance" {
      + ami                          = "ami-0ded330691a314693"
      + arn                          = (known after apply)
      + associate_public_ip_address  = true
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + iam_instance_profile         = "tdl4-s3-role-instanceprofile"
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "da-key"
      + outpost_arn                  = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + secondary_private_ips        = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = "subnet-04709dce111382a62"
      + tags                         = {
          + "Name" = "tdl4-Instance"
        }
      + tenancy                      = (known after apply)
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = false
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 20
          + volume_type           = "gp2"
        }
    }

  # aws_s3_bucket.bucket will be created
  + resource "aws_s3_bucket" "bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "tdl4-bucket"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Name" = "tdl4-bucket"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

  # aws_security_group.instance_sg will be created
  + resource "aws_security_group" "instance_sg" {
      + arn                    = (known after apply)
      + description            = "Allow inbound ssh traffic from own ip and all egress traffic"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "120.148.174.1/32",
                ]
              + description      = "Inbound SSH"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "tdl4-sg"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "tdl4-sg"
        }
      + vpc_id                 = "vpc-02ec2836691642ace"
    }

Plan: 6 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

[yvonne@centos8 afaryy]$ terraform apply

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_iam_instance_profile.s3-role-instanceprofile will be created
  + resource "aws_iam_instance_profile" "s3-role-instanceprofile" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "da-c04-iac01-s3-role-instanceprofile"
      + path        = "/"
      + role        = "da-c04-iac01-ec2-s3-role"
      + unique_id   = (known after apply)
    }

  # aws_iam_role.ec2-s3-role will be created
  + resource "aws_iam_role" "ec2-s3-role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = "InstanceS3Role"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "da-c04-iac01-ec2-s3-role"
      + path                  = "/"
      + tags                  = {
          + "Name" = "da-c04-iac01-ec2-s3-role"
        }
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy.s3-role-policy will be created
  + resource "aws_iam_role_policy" "s3-role-policy" {
      + id     = (known after apply)
      + name   = "da-c04-iac01-s3-role-policy"
      + policy = (known after apply)
      + role   = (known after apply)
    }

  # aws_instance.instance will be created
  + resource "aws_instance" "instance" {
      + ami                          = "ami-0ded330691a314693"
      + arn                          = (known after apply)
      + associate_public_ip_address  = true
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + iam_instance_profile         = "da-c04-iac01-s3-role-instanceprofile"
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "da-key"
      + outpost_arn                  = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + secondary_private_ips        = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = "subnet-04709dce111382a62"
      + tags                         = {
          + "Name" = "da-c04-iac01-Instance"
        }
      + tenancy                      = (known after apply)
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = false
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 20
          + volume_type           = "gp2"
        }
    }

  # aws_s3_bucket.bucket will be created
  + resource "aws_s3_bucket" "bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "da-c04-iac01-bucket"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Name" = "da-c04-iac01-bucket"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

  # aws_security_group.instance_sg will be created
  + resource "aws_security_group" "instance_sg" {
      + arn                    = (known after apply)
      + description            = "Allow inbound ssh traffic from own ip and all egress traffic"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "120.148.174.1/32",
                ]
              + description      = "Inbound SSH"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "da-c04-iac01-sg"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "da-c04-iac01-sg"
        }
      + vpc_id                 = "vpc-02ec2836691642ace"
    }

Plan: 6 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + instance = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_security_group.instance_sg: Creating...
aws_iam_role.ec2-s3-role: Creating...
aws_s3_bucket.bucket: Creating...
aws_security_group.instance_sg: Creation complete after 2s [id=sg-036e7f563a1d7ddd4]
aws_iam_role.ec2-s3-role: Creation complete after 2s [id=da-c04-iac01-ec2-s3-role]
aws_iam_instance_profile.s3-role-instanceprofile: Creating...
aws_s3_bucket.bucket: Creation complete after 4s [id=da-c04-iac01-bucket]
aws_iam_role_policy.s3-role-policy: Creating...
aws_iam_instance_profile.s3-role-instanceprofile: Creation complete after 3s [id=da-c04-iac01-s3-role-instanceprofile]
aws_instance.instance: Creating...
aws_iam_role_policy.s3-role-policy: Creation complete after 2s [id=da-c04-iac01-ec2-s3-role:da-c04-iac01-s3-role-policy]
aws_instance.instance: Still creating... [10s elapsed]
aws_instance.instance: Still creating... [20s elapsed]
aws_instance.instance: Creation complete after 28s [id=i-0a1699b5b902446af]

Apply complete! Resources: 6 added, 0 changed, 0 destroyed.

Outputs:

instance = 52.63.53.47


[yvonne@centos8 afaryy]$ ssh -i ~/.ssh/da-key.pem ec2-user@52.63.53.47

       __|  __|_  )
       _|  (     /   Amazon Linux 2 AMI
      ___|\___|___|

https://aws.amazon.com/amazon-linux-2/
7 package(s) needed for security, out of 14 available
Run "sudo yum update" to apply all updates.
[ec2-user@ip-10-128-10-122 ~]$ aws sts get-caller-identity
{
    "Account": "421117346104", 
    "UserId": "AROAWEDEMYE4DEU6H7ANX:i-0a1699b5b902446af", 
    "Arn": "arn:aws:sts::421117346104:assumed-role/da-c04-iac01-ec2-s3-role/i-0a1699b5b902446af"
}
[ec2-user@ip-10-128-10-122 ~]$ curl http://169.254.169.254/latest/meta-data/iam/info
{
  "Code" : "Success",
  "LastUpdated" : "2020-09-13T10:10:15Z",
  "InstanceProfileArn" : "arn:aws:iam::421117346104:instance-profile/da-c04-iac01-s3-role-instanceprofile",
  "InstanceProfileId" : "AIPAWEDEMYE4L2X2N2WE5"
}

[ec2-user@ip-10-128-10-122 ~]$ aws s3 ls
An error occurred (AccessDenied) when calling the ListBuckets operation: Access Denied

[ec2-user@ip-10-128-10-122 ~]$ aws s3 ls da-c04-iac01-bucket
2020-09-13 10:26:56         10 sample.txt